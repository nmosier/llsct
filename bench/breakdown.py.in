#!${Python3_EXECUTABLE}

import argparse
import sys
import os
import tempfile
import json
import matplotlib.pyplot as plt
import seaborn
import pandas

parser = argparse.ArgumentParser()
parser.add_argument('tests')
parser.add_argument('outdir')
parser.add_argument('--skip', action = 'store_true')
parser.add_argument('-n', type = int, default = 5)

args = parser.parse_args()

with open(args.tests) as f:
    spec = json.load(f)

baseline = None
partials = []
fulls = []
sums = []

name_to_record = {}

os.makedirs(args.outdir, exist_ok = True)

# seaborn.set(rc = {"figure.figsize": (4, 3)})


def overhead_of(a, b):
    return (a - b) / b * 100

# Run each benchmark and save results in JSON.
# Create benchmarks dictionary: benchmark_name -> json
benchmarks = dict()
for benchmark in spec['benchmarks']:
    name = benchmark['name']
    jsonpath = f'{args.outdir}/{name}.json'
    if not args.skip:
        if os.system('{} --benchmark_out={} --benchmark_out_format=json --benchmark_repetitions={}'.format(benchmark['path'], jsonpath, args.n)):
            print('benchmark failed to run, exiting...', file = sys.stderr)
            exit(1)
    with open(jsonpath) as f:
        j = json.load(f)
    k = j['benchmarks']
    mean = '_mean'
    k = [d for d in k if d['name'].endswith(mean)]
    xs = [int(d['name'][:-len(mean)].split('/')[-1]) for d in k]
    ys = [float(d['cpu_time']) for d in k]
    benchmarks[name] = {'x': xs, 'y': ys}

# Create plots
for plot in spec['plots']:
    baseline_name = plot['baseline']
    baseline_xs = benchmarks[baseline_name]['x']
    baseline_ys = benchmarks[baseline_name]['y']
    N = len(baseline_ys)
    table = {'name': [], 'x': [], 'y': []}
    for line in plot['lines']:
        overhead = [float(0)] * N
        for source in line['sources']:
            source_ys = benchmarks[source]['y']
            for i in range(N):
                overhead[i] += overhead_of(source_ys[i], baseline_ys[i])
        table['name'].extend([line['name']] * N)
        table['x'].extend(baseline_xs)
        table['y'].extend(overhead)

    # generate dataframe
    df = pandas.DataFrame(data = table)
    plt.figure(figsize=(3.5,2.25))
    ax = seaborn.lineplot(
        data = df,
        x = 'x',
        y = 'y',
        hue = 'name',
    )
    ax.figure.tight_layout()    
    ax.set(xscale = 'log')
    if 'axes' in plot:
        ax.set(**plot['axes'])
    plt.xticks(
        ticks = baseline_xs,
        labels = baseline_xs,
    )
    # ax.legend().set(ncols = 2)
    ax.set_xticklabels(labels = ['64', '128', '256', '512', '1K', '2K', '4K', '8K', '16K', '32K', '64K'], rotation = 45, horizontalalignment = 'right')

    line_styles = dict([(line['name'], line['style']) for line in plot['lines']])

    # Set line styles
    M = len(plot['lines'])
    assert M * 2 == len(ax.lines)
    for i in range(M):
        line1 = ax.lines[i]
        line2 = ax.lines[i + M]
        style = line_styles[line2._label]
        line1.set_linestyle(style)
        line2.set_linestyle(style)
    for line in ax.legend().get_lines():
        line.set_linestyle(line_styles[line._label])

        # plt.legend().set(ncols = 2)

    ax.legend(
        ncol = 2,
        columnspacing = 1.0,
        labelspacing = 0.25,
    )
        
    plt.savefig('{}/{}'.format(args.outdir, plot['filename']))
    plt.clf()
